// source: protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.guys.coding.hackathon.proto.notifcation.Crawl', null, global);
goog.exportSymbol('proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure', null, global);
goog.exportSymbol('proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess', null, global);
goog.exportSymbol('proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch', null, global);
goog.exportSymbol('proto.com.guys.coding.hackathon.proto.notifcation.Query', null, global);
goog.exportSymbol('proto.com.guys.coding.hackathon.proto.notifcation.Query.Operator', null, global);
goog.exportSymbol('proto.com.guys.coding.hackathon.proto.notifcation.Request', null, global);
goog.exportSymbol('proto.com.guys.coding.hackathon.proto.notifcation.Request.IsCase', null, global);
goog.exportSymbol('proto.com.guys.coding.hackathon.proto.notifcation.Response', null, global);
goog.exportSymbol('proto.com.guys.coding.hackathon.proto.notifcation.Response.IsCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.guys.coding.hackathon.proto.notifcation.Query.repeatedFields_, null);
};
goog.inherits(proto.com.guys.coding.hackathon.proto.notifcation.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.guys.coding.hackathon.proto.notifcation.Query.displayName = 'proto.com.guys.coding.hackathon.proto.notifcation.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.guys.coding.hackathon.proto.notifcation.Crawl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.guys.coding.hackathon.proto.notifcation.Crawl.displayName = 'proto.com.guys.coding.hackathon.proto.notifcation.Crawl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.com.guys.coding.hackathon.proto.notifcation.Request.oneofGroups_);
};
goog.inherits(proto.com.guys.coding.hackathon.proto.notifcation.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.guys.coding.hackathon.proto.notifcation.Request.displayName = 'proto.com.guys.coding.hackathon.proto.notifcation.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.displayName = 'proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.repeatedFields_, null);
};
goog.inherits(proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.displayName = 'proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.displayName = 'proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.com.guys.coding.hackathon.proto.notifcation.Response.oneofGroups_);
};
goog.inherits(proto.com.guys.coding.hackathon.proto.notifcation.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.guys.coding.hackathon.proto.notifcation.Response.displayName = 'proto.com.guys.coding.hackathon.proto.notifcation.Response';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.com.guys.coding.hackathon.proto.notifcation.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    keywordsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    operator: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Query}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.guys.coding.hackathon.proto.notifcation.Query;
  return proto.com.guys.coding.hackathon.proto.notifcation.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Query}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeywords(value);
      break;
    case 2:
      var value = /** @type {!proto.com.guys.coding.hackathon.proto.notifcation.Query.Operator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.guys.coding.hackathon.proto.notifcation.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeywordsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = /** @type {!proto.com.guys.coding.hackathon.proto.notifcation.Query.Operator} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.Operator = {
  OR: 0,
  AND: 1
};

/**
 * repeated string keywords = 1;
 * @return {!Array<string>}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.prototype.getKeywordsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Query} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.prototype.setKeywordsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Query} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.prototype.addKeywords = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Query} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.prototype.clearKeywordsList = function() {
  return this.setKeywordsList([]);
};


/**
 * required Operator operator = 2;
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Query.Operator}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.prototype.getOperator = function() {
  return /** @type {!proto.com.guys.coding.hackathon.proto.notifcation.Query.Operator} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Query.Operator} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Query} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.prototype.setOperator = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Query} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.prototype.clearOperator = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Query.prototype.hasOperator = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.toObject = function(opt_includeInstance) {
  return proto.com.guys.coding.hackathon.proto.notifcation.Crawl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    url: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    query: (f = msg.getQuery()) && proto.com.guys.coding.hackathon.proto.notifcation.Query.toObject(includeInstance, f),
    jobid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.guys.coding.hackathon.proto.notifcation.Crawl;
  return proto.com.guys.coding.hackathon.proto.notifcation.Crawl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = new proto.com.guys.coding.hackathon.proto.notifcation.Query;
      reader.readMessage(value,proto.com.guys.coding.hackathon.proto.notifcation.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.guys.coding.hackathon.proto.notifcation.Crawl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.guys.coding.hackathon.proto.notifcation.Query.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.setRequestid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.clearRequestid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string url = 2;
 * @return {string}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.setUrl = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.clearUrl = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Query query = 3;
 * @return {?proto.com.guys.coding.hackathon.proto.notifcation.Query}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.getQuery = function() {
  return /** @type{?proto.com.guys.coding.hackathon.proto.notifcation.Query} */ (
    jspb.Message.getWrapperField(this, proto.com.guys.coding.hackathon.proto.notifcation.Query, 3));
};


/**
 * @param {?proto.com.guys.coding.hackathon.proto.notifcation.Query|undefined} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl} returns this
*/
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string jobId = 4;
 * @return {string}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.getJobid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.setJobid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Crawl} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.clearJobid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Crawl.prototype.hasJobid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.IsCase = {
  IS_NOT_SET: 0,
  CRAWL: 1
};

/**
 * @return {proto.com.guys.coding.hackathon.proto.notifcation.Request.IsCase}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.prototype.getIsCase = function() {
  return /** @type {proto.com.guys.coding.hackathon.proto.notifcation.Request.IsCase} */(jspb.Message.computeOneofCase(this, proto.com.guys.coding.hackathon.proto.notifcation.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.com.guys.coding.hackathon.proto.notifcation.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    crawl: (f = msg.getCrawl()) && proto.com.guys.coding.hackathon.proto.notifcation.Crawl.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Request}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.guys.coding.hackathon.proto.notifcation.Request;
  return proto.com.guys.coding.hackathon.proto.notifcation.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Request}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.guys.coding.hackathon.proto.notifcation.Crawl;
      reader.readMessage(value,proto.com.guys.coding.hackathon.proto.notifcation.Crawl.deserializeBinaryFromReader);
      msg.setCrawl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.guys.coding.hackathon.proto.notifcation.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrawl();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.guys.coding.hackathon.proto.notifcation.Crawl.serializeBinaryToWriter
    );
  }
};


/**
 * optional Crawl crawl = 1;
 * @return {?proto.com.guys.coding.hackathon.proto.notifcation.Crawl}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.prototype.getCrawl = function() {
  return /** @type{?proto.com.guys.coding.hackathon.proto.notifcation.Crawl} */ (
    jspb.Message.getWrapperField(this, proto.com.guys.coding.hackathon.proto.notifcation.Crawl, 1));
};


/**
 * @param {?proto.com.guys.coding.hackathon.proto.notifcation.Crawl|undefined} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Request} returns this
*/
proto.com.guys.coding.hackathon.proto.notifcation.Request.prototype.setCrawl = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.com.guys.coding.hackathon.proto.notifcation.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Request} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.prototype.clearCrawl = function() {
  return this.setCrawl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Request.prototype.hasCrawl = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.toObject = function(opt_includeInstance) {
  return proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    count: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch}
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch;
  return proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch}
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required string entityId = 1;
 * @return {string}
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.getEntityid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.setEntityid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.clearEntityid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.hasEntityid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string value = 2;
 * @return {string}
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 count = 3;
 * @return {number}
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.setCount = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.clearCount = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.prototype.hasCount = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.toObject = function(opt_includeInstance) {
  return proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    urlsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    foundentitiesList: jspb.Message.toObjectList(msg.getFoundentitiesList(),
    proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess;
  return proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUrls(value);
      break;
    case 3:
      var value = new proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch;
      reader.readMessage(value,proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.deserializeBinaryFromReader);
      msg.addFoundentities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFoundentitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch.serializeBinaryToWriter
    );
  }
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.setRequestid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.clearRequestid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string urls = 2;
 * @return {!Array<string>}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.getUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.setUrlsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.addUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.clearUrlsList = function() {
  return this.setUrlsList([]);
};


/**
 * repeated EntityMatch foundEntities = 3;
 * @return {!Array<!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch>}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.getFoundentitiesList = function() {
  return /** @type{!Array<!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch, 3));
};


/**
 * @param {!Array<!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch>} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess} returns this
*/
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.setFoundentitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.addFoundentities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.com.guys.coding.hackathon.proto.notifcation.EntityMatch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.prototype.clearFoundentitiesList = function() {
  return this.setFoundentitiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.prototype.toObject = function(opt_includeInstance) {
  return proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure;
  return proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.prototype.setRequestid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.prototype.clearRequestid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.IsCase = {
  IS_NOT_SET: 0,
  SUCCESS: 1,
  FAILURE: 2
};

/**
 * @return {proto.com.guys.coding.hackathon.proto.notifcation.Response.IsCase}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.prototype.getIsCase = function() {
  return /** @type {proto.com.guys.coding.hackathon.proto.notifcation.Response.IsCase} */(jspb.Message.computeOneofCase(this, proto.com.guys.coding.hackathon.proto.notifcation.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.com.guys.coding.hackathon.proto.notifcation.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.toObject(includeInstance, f),
    failure: (f = msg.getFailure()) && proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Response}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.guys.coding.hackathon.proto.notifcation.Response;
  return proto.com.guys.coding.hackathon.proto.notifcation.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Response}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess;
      reader.readMessage(value,proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure;
      reader.readMessage(value,proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.deserializeBinaryFromReader);
      msg.setFailure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.guys.coding.hackathon.proto.notifcation.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.guys.coding.hackathon.proto.notifcation.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess.serializeBinaryToWriter
    );
  }
  f = message.getFailure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure.serializeBinaryToWriter
    );
  }
};


/**
 * optional CrawlSuccess success = 1;
 * @return {?proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.prototype.getSuccess = function() {
  return /** @type{?proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess} */ (
    jspb.Message.getWrapperField(this, proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess, 1));
};


/**
 * @param {?proto.com.guys.coding.hackathon.proto.notifcation.CrawlSuccess|undefined} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Response} returns this
*/
proto.com.guys.coding.hackathon.proto.notifcation.Response.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.com.guys.coding.hackathon.proto.notifcation.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Response} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CrawlFailure failure = 2;
 * @return {?proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.prototype.getFailure = function() {
  return /** @type{?proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure} */ (
    jspb.Message.getWrapperField(this, proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure, 2));
};


/**
 * @param {?proto.com.guys.coding.hackathon.proto.notifcation.CrawlFailure|undefined} value
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Response} returns this
*/
proto.com.guys.coding.hackathon.proto.notifcation.Response.prototype.setFailure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.com.guys.coding.hackathon.proto.notifcation.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.guys.coding.hackathon.proto.notifcation.Response} returns this
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.prototype.clearFailure = function() {
  return this.setFailure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.guys.coding.hackathon.proto.notifcation.Response.prototype.hasFailure = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.com.guys.coding.hackathon.proto.notifcation);
